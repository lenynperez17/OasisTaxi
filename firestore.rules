rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si es el propietario del documento
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Función para verificar si es administrador
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Función para verificar si es conductor
    function isDriver() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'driver';
    }
    
    // Reglas para usuarios
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Reglas para conductores
    match /drivers/{driverId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(driverId) || isAdmin();
    }
    
    // Reglas para viajes
    match /trips/{tripId} {
      allow read: if isAuthenticated() && 
                     (resource.data.passengerId == request.auth.uid || 
                      resource.data.driverId == request.auth.uid || 
                      isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                      (resource.data.passengerId == request.auth.uid || 
                       resource.data.driverId == request.auth.uid || 
                       isAdmin());
      allow delete: if isAdmin();
    }
    
    // Reglas para mensajes de chat
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
                     (get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]));
      allow create: if isAuthenticated() && 
                      (get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]));
      allow update: if false; // Los mensajes no se pueden editar
      allow delete: if isAdmin();
    }
    
    // Reglas para notificaciones
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Reglas para configuración
    match /config/{document} {
      allow read: if true; // Configuración pública
      allow write: if isAdmin();
    }
    
    // Reglas para tarifas
    match /rates/{rateId} {
      allow read: if true; // Tarifas públicas
      allow write: if isAdmin();
    }
    
    // Reglas para promociones
    match /promotions/{promoId} {
      allow read: if true; // Promociones públicas
      allow write: if isAdmin();
    }
  }
}